// <auto-generated />
using System;
using Fitness.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fitness.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250927102035_AddMuscleGroupToExercise")]
    partial class AddMuscleGroupToExercise
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExerciseWorkoutTemplate", b =>
                {
                    b.Property<Guid>("ExercisesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkoutTemplatesId")
                        .HasColumnType("uuid");

                    b.HasKey("ExercisesId", "WorkoutTemplatesId");

                    b.HasIndex("WorkoutTemplatesId");

                    b.ToTable("WorkoutTemplateExercises", (string)null);
                });

            modelBuilder.Entity("Fitness.Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.ExerciseLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkoutSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutSessionId");

                    b.ToTable("ExerciseLogs");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.SetLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExerciseLogId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<int>("RestTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseLogId");

                    b.ToTable("SetLogs");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.WorkoutSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AverageRestTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkoutTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.WorkoutTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutTemplates");
                });

            modelBuilder.Entity("ExerciseWorkoutTemplate", b =>
                {
                    b.HasOne("Fitness.Domain.Entities.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.Domain.Entities.WorkoutTemplate", null)
                        .WithMany()
                        .HasForeignKey("WorkoutTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitness.Domain.Entities.ExerciseLog", b =>
                {
                    b.HasOne("Fitness.Domain.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseLogs")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.Domain.Entities.WorkoutSession", "WorkoutSession")
                        .WithMany("ExerciseLogs")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.SetLog", b =>
                {
                    b.HasOne("Fitness.Domain.Entities.ExerciseLog", "ExerciseLog")
                        .WithMany("SetLogs")
                        .HasForeignKey("ExerciseLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseLog");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.WorkoutSession", b =>
                {
                    b.HasOne("Fitness.Domain.Entities.User", "User")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.Domain.Entities.WorkoutTemplate", "WorkoutTemplate")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkoutTemplate");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.WorkoutTemplate", b =>
                {
                    b.HasOne("Fitness.Domain.Entities.User", "User")
                        .WithMany("WorkoutTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("ExerciseLogs");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.ExerciseLog", b =>
                {
                    b.Navigation("SetLogs");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.User", b =>
                {
                    b.Navigation("WorkoutSessions");

                    b.Navigation("WorkoutTemplates");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.WorkoutSession", b =>
                {
                    b.Navigation("ExerciseLogs");
                });

            modelBuilder.Entity("Fitness.Domain.Entities.WorkoutTemplate", b =>
                {
                    b.Navigation("WorkoutSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
